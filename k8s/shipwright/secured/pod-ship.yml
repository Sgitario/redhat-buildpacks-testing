apiVersion: v1
kind: Pod
metadata:
  annotations:
    pipeline.tekton.dev/release: 6db52ca
    tekton.dev/ready: READY
  labels:
    app.kubernetes.io/managed-by: tekton-pipelines
    build.shipwright.io/name: buildpack-nodejs-build
    buildrun.shipwright.io/name: buildpack-nodejs-buildrun-1
    clusterbuildstrategy.shipwright.io/name: buildpacks
    tekton.dev/taskRun: buildpack-nodejs-buildrun-1
  name: buildpack-nodejs-buildrun-1-pod
  namespace: demo
spec:
  containers:
  - args:
    - -wait_file
    - /tekton/downward/ready
    - -wait_file_content
    - -post_file
    - /tekton/run/0/out
    - -termination_path
    - /tekton/termination
    - -step_metadata_dir
    - /tekton/run/0/status
    - -docker-config=registry-creds
    - -results
    - shp-image-digest,shp-image-size,shp-error-message,shp-error-reason,shp-source-default-commit-sha,shp-source-default-commit-author,shp-source-default-branch-name
    - -entrypoint
    - /ko-app/git
    - --
    - --url
    - https://github.com/shipwright-io/sample-nodejs
    - --target
    - /workspace/source
    - --result-file-commit-sha
    - /tekton/results/shp-source-default-commit-sha
    - --result-file-commit-author
    - /tekton/results/shp-source-default-commit-author
    - --result-file-branch-name
    - /tekton/results/shp-source-default-branch-name
    - --result-file-error-message
    - /tekton/results/shp-error-message
    - --result-file-error-reason
    - /tekton/results/shp-error-reason
    command:
    - /tekton/bin/entrypoint
    image: ghcr.io/shipwright-io/build/git:v0.11.0@sha256:aecf8bdc01ea00be83e933162a0b6d063846b315fe9dcae60e4be1a34e85d514
    imagePullPolicy: IfNotPresent
    name: step-source-default
    resources: {}
    securityContext:
      runAsGroup: 1000
      runAsUser: 1000
    terminationMessagePath: /tekton/termination
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /workspace/source
      name: ws-dsq8v
    - mountPath: /tekton/downward
      name: tekton-internal-downward
      readOnly: true
    - mountPath: /tekton/creds
      name: tekton-creds-init-home-0
    - mountPath: /tekton/run/0
      name: tekton-internal-run-0
    - mountPath: /tekton/run/1
      name: tekton-internal-run-1
      readOnly: true
    - mountPath: /tekton/run/2
      name: tekton-internal-run-2
      readOnly: true
    - mountPath: /tekton/bin
      name: tekton-internal-bin
      readOnly: true
    - mountPath: /workspace
      name: tekton-internal-workspace
    - mountPath: /tekton/home
      name: tekton-internal-home
    - mountPath: /tekton/results
      name: tekton-internal-results
    - mountPath: /tekton/steps
      name: tekton-internal-steps
      readOnly: true
    - mountPath: /tekton/creds-secrets/registry-creds
      name: tekton-internal-secret-volume-registry-creds-vcp62
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-api-access-bnv5z
      readOnly: true
  - args:
    - -wait_file
    - /tekton/run/0/out
    - -post_file
    - /tekton/run/1/out
    - -termination_path
    - /tekton/termination
    - -step_metadata_dir
    - /tekton/run/1/status
    - -docker-config=registry-creds
    - -results
    - shp-image-digest,shp-image-size,shp-error-message,shp-error-reason,shp-source-default-commit-sha,shp-source-default-commit-author,shp-source-default-branch-name
    - -entrypoint
    - chown
    - --
    - -R
    - 1000:1000
    - /tekton/home
    command:
    - /tekton/bin/entrypoint
    image: kind-registry.local:5000/paketobuildpacks/builder:base
    imagePullPolicy: Always
    name: step-prepare
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 65Mi
    securityContext:
      capabilities:
        add:
        - CHOWN
      runAsUser: 0
    terminationMessagePath: /tekton/termination
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /workspace/source
      name: ws-dsq8v
    - mountPath: /tekton/creds
      name: tekton-creds-init-home-1
    - mountPath: /tekton/run/0
      name: tekton-internal-run-0
      readOnly: true
    - mountPath: /tekton/run/1
      name: tekton-internal-run-1
    - mountPath: /tekton/run/2
      name: tekton-internal-run-2
      readOnly: true
    - mountPath: /tekton/bin
      name: tekton-internal-bin
      readOnly: true
    - mountPath: /workspace
      name: tekton-internal-workspace
    - mountPath: /tekton/home
      name: tekton-internal-home
    - mountPath: /tekton/results
      name: tekton-internal-results
    - mountPath: /tekton/steps
      name: tekton-internal-steps
      readOnly: true
    - mountPath: /tekton/creds-secrets/registry-creds
      name: tekton-internal-secret-volume-registry-creds-vcp62
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-api-access-bnv5z
      readOnly: true
  - args:
    - -wait_file
    - /tekton/run/1/out
    - -post_file
    - /tekton/run/2/out
    - -termination_path
    - /tekton/termination
    - -step_metadata_dir
    - /tekton/run/2/status
    - -docker-config=registry-creds
    - -results
    - shp-image-digest,shp-image-size,shp-error-message,shp-error-reason,shp-source-default-commit-sha,shp-source-default-commit-author,shp-source-default-branch-name
    - -entrypoint
    - /bin/bash
    - --
    - -c
    - "set -euo pipefail\n\necho \"> Processing environment variables...\"\nENV_DIR=\"/platform/env\"\n\nenvs=($(env))\n\n#
      Denying the creation of non required files from system environments.\n# The
      creation of a file named PATH (corresponding to PATH system environment)\n#
      caused failure for python source during pip install (https://github.com/Azure-Samples/python-docs-hello-world)\nblock_list=(\"PATH\"
      \"HOSTNAME\" \"PWD\" \"_\" \"SHLVL\" \"HOME\" \"\")\n\nfor env in \"${envs[@]}\";
      do\n  blocked=false\n\n  IFS='=' read -r key value string <<< \"$env\"\n\n  for
      str in \"${block_list[@]}\"; do\n    if [[ \"$key\" == \"$str\" ]]; then\n      blocked=true\n
      \     break\n    fi\n  done\n\n  if [ \"$blocked\" == \"false\" ]; then\n    path=\"${ENV_DIR}/${key}\"\n
      \   echo -n \"$value\" > \"$path\"\n  fi\ndone\n\nLAYERS_DIR=/tmp/layers\nCACHE_DIR=/tmp/cache\n\nmkdir
      \"$CACHE_DIR\" \"$LAYERS_DIR\"\n\nfunction anounce_phase {\n  printf \"===>
      %s\\n\" \"$1\" \n}\n\nanounce_phase \"DETECTING\"\n/cnb/lifecycle/detector -app=\"${PARAM_SOURCE_CONTEXT}\"
      -layers=\"$LAYERS_DIR\"\n\nanounce_phase \"ANALYZING\"\n/cnb/lifecycle/analyzer
      -layers=\"$LAYERS_DIR\" -cache-dir=\"$CACHE_DIR\" \"${PARAM_OUTPUT_IMAGE}\"\n\nanounce_phase
      \"RESTORING\"\n/cnb/lifecycle/restorer -cache-dir=\"$CACHE_DIR\"\n\nanounce_phase
      \"BUILDING\"\n/cnb/lifecycle/builder -app=\"${PARAM_SOURCE_CONTEXT}\" -layers=\"$LAYERS_DIR\"\n\nexporter_args=(
      -layers=\"$LAYERS_DIR\" -report=/tmp/report.toml -cache-dir=\"$CACHE_DIR\" -app=\"${PARAM_SOURCE_CONTEXT}\")\ngrep
      -q \"buildpack-default-process-type\" \"$LAYERS_DIR/config/metadata.toml\" ||
      exporter_args+=( -process-type web ) \n\nanounce_phase \"EXPORTING\"\n/cnb/lifecycle/exporter
      \"${exporter_args[@]}\" \"${PARAM_OUTPUT_IMAGE}\"\n\n# Store the image digest\ngrep
      digest /tmp/report.toml | tr -d ' \\\"\\n' | sed s/digest=// > \"/tekton/results/shp-image-digest\"\n"
    command:
    - /tekton/bin/entrypoint
    env:
    - name: CNB_PLATFORM_API
      value: "0.4"
    - name: PARAM_SOURCE_CONTEXT
      value: /workspace/source/source-build
    - name: PARAM_OUTPUT_IMAGE
      value: kind-registry.local:5000/snowdrop/sample-nodejs:latest
    #- name: SERVICE_BINDING_ROOT
    #  value: /platform/bindings
    - name: SSL_CERT_DIR
      value: /platform/bindings
    image: kind-registry.local:5000/paketobuildpacks/builder:base
    imagePullPolicy: Always
    name: step-build-and-push
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 65Mi
    securityContext:
      runAsGroup: 1000
      runAsUser: 1000
    terminationMessagePath: /tekton/termination
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /platform/env
      name: platform-env
    - mountPath: /platform/bindings
      name: certificate-registry
      readOnly: true
    - mountPath: /workspace/source
      name: ws-dsq8v
    - mountPath: /tekton/creds
      name: tekton-creds-init-home-2
    - mountPath: /tekton/run/0
      name: tekton-internal-run-0
      readOnly: true
    - mountPath: /tekton/run/1
      name: tekton-internal-run-1
      readOnly: true
    - mountPath: /tekton/run/2
      name: tekton-internal-run-2
    - mountPath: /tekton/bin
      name: tekton-internal-bin
      readOnly: true
    - mountPath: /workspace
      name: tekton-internal-workspace
    - mountPath: /tekton/home
      name: tekton-internal-home
    - mountPath: /tekton/results
      name: tekton-internal-results
    - mountPath: /tekton/steps
      name: tekton-internal-steps
      readOnly: true
    - mountPath: /tekton/creds-secrets/registry-creds
      name: tekton-internal-secret-volume-registry-creds-vcp62
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-api-access-bnv5z
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  imagePullSecrets:
  - name: registry-creds
  initContainers:
  - command:
    - /ko-app/entrypoint
    - init
    - /ko-app/entrypoint
    - /tekton/bin/entrypoint
    - step-source-default
    - step-prepare
    - step-build-and-push
    image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/entrypoint:v0.44.0@sha256:0be7d0cd52ba04baa136f987c74d80d171e3c1c86d47db8368825cfbe4d8df0b
    imagePullPolicy: IfNotPresent
    name: prepare
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /tekton/bin
      name: tekton-internal-bin
    - mountPath: /tekton/steps
      name: tekton-internal-steps
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-api-access-bnv5z
      readOnly: true
    workingDir: /
  nodeName: kind-control-plane
  preemptionPolicy: PreemptLowerPriority
  priority: 0
  restartPolicy: Never
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: shipwright
  serviceAccountName: shipwright
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - emptyDir: {}
    name: tekton-internal-workspace
  - emptyDir: {}
    name: tekton-internal-home
  - emptyDir: {}
    name: tekton-internal-results
  - emptyDir: {}
    name: tekton-internal-steps
  - name: tekton-internal-secret-volume-registry-creds-vcp62
    secret:
      defaultMode: 420
      secretName: registry-creds
  - emptyDir: {}
    name: tekton-internal-bin
  - downwardAPI:
      defaultMode: 420
      items:
      - fieldRef:
          apiVersion: v1
          fieldPath: metadata.annotations['tekton.dev/ready']
        path: ready
    name: tekton-internal-downward
  - emptyDir:
      medium: Memory
    name: tekton-creds-init-home-0
  - emptyDir: {}
    name: tekton-internal-run-0
  - emptyDir:
      medium: Memory
    name: tekton-creds-init-home-1
  - emptyDir: {}
    name: tekton-internal-run-1
  - emptyDir:
      medium: Memory
    name: tekton-creds-init-home-2
  - emptyDir: {}
    name: tekton-internal-run-2
  - emptyDir: {}
    name: platform-env
  - configMap:
      defaultMode: 420
      name: certificate-registry
    name: certificate-registry
  - emptyDir: {}
    name: ws-dsq8v
  - name: kube-api-access-bnv5z
    projected:
      defaultMode: 420
      sources:
      - serviceAccountToken:
          expirationSeconds: 3607
          path: token
      - configMap:
          items:
          - key: ca.crt
            path: ca.crt
          name: kube-root-ca.crt
      - downwardAPI:
          items:
          - fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
            path: namespace
